function generateDecks(index, kind)
  local original_position = {40, 2, 10}
  local dupe_position = {40,2,-10}
  local indexHeight = (index - 1) * 10
  if (SGH_LOOKUP[kind] == nil) then
    log("Creating " .. kind .. " decks")
    SGH_LOOKUP[kind] = {}

    local divider_cards = spawnObject({
        type = "DeckCustom",
        position = original_position,
        rotation = SGH_SETTINGS.rotation,
        scale = SGH_SETTINGS.card_scale
    })
    local divider_columns = 4
    local divider_rows = 2
    local divider_count = 7
    if (kind == 'gathering') then
      divider_columns = 3
      divider_rows = 3
      divider_count = 9
    end
    divider_cards.setCustomObject({
      face = SGH_PATHS[kind].dividers,
      back = SGH_PATHS.cardback.divider,
      unique_back = false,
      width = divider_columns,
      height = divider_rows,
      number = divider_count,
      sideways = false,
      back_is_hidden = true
    })

    local profession_cards = spawnObject(
      {
        type = "DeckCustom",
        position = original_position,
        rotation = SGH_SETTINGS.rotation,
        scale = SGH_SETTINGS.card_scale
      }
    )
    profession_cards.setCustomObject({
      face = SGH_PATHS[kind].professions,
      back = SGH_PATHS.cardback.profession,
      unique_back = false,
      width = 5,
      height = 6,
      number = 30,
      sideways = false,
      back_is_hidden = true
    })

    SGH_LOOKUP[kind].profession_decks = {}
    SGH_LOOKUP[kind].profession_dividers = {}
    SGH_LOOKUP[kind].profession_columns = {}

    for ii, profession in ipairs(SGH_SETTINGS[kind].professions) do
      local deck = nil
      local lastCard = nil
      local divider_position = {-40 + (ii*8), 1, 20 - indexHeight}
      local profession_divider = divider_cards.takeObject({position=divider_position,rotation={0,180,0}})
      profession_divider.addTag(kind)
      for jj, color in ipairs(SGH_SETTINGS.card_defaults.profession.color_order) do
        local card = profession_cards.takeObject({position=dupe_position})
        for kk = 1, SGH_SETTINGS.card_defaults.profession.color_dupe_count do
          local profession_position = {-40 + (ii*8), 2, 16 - indexHeight}
          local clone = card.clone({position=profession_position})
          clone.setName("Profession - "..profession.." - "..color)
          clone.addTag(kind)
          if(lastCard ~= nil) then
            if(deck ~= nil) then
              deck = deck.putObject(clone)
            else
              deck = lastCard.putObject(clone)
              SGH_LOOKUP[kind].profession_decks[profession] = deck
              SGH_LOOKUP[kind].profession_dividers[profession] = profession_divider
            end
          end
          lastCard = clone
        end
        destroyObject(card)
      end
    end

    if(SGH_LOOKUP.victory_point_card_objects == nil) then
      SGH_LOOKUP.victory_point_card_objects = {}
      SGH_LOOKUP.victory_point_cards = {}
    end
    SGH_LOOKUP.victory_point_card_objects[kind] = {}

    local victory_point_cards = spawnObject({
      type="DeckCustom",
      position = original_position,
      rotation = {0,180,180},
      scale = {1.5,1.5,1.5}
    })

    victory_point_cards.setCustomObject({
      face = SGH_PATHS[kind].victory_points,
      back = SGH_PATHS.cardback.victory_point,
      unique_back = false,
      width = 3,
      height = 3,
      number = 9,
      sideways = false,
      back_is_hidden = true
    })

    local victory_point_divider_position = {-40, 1, 20 - indexHeight}
    SGH_LOOKUP[kind].victory_point_divider = divider_cards.takeObject({position = victory_point_divider_position, rotation={0,180,0}})
    SGH_LOOKUP[kind].victory_point_divider.addTag(kind)
    local deck = nil
    local last_card = nil
    for ii, victory_point in ipairs(SGH_SETTINGS[kind].victory_points) do
      SGH_LOOKUP.victory_point_cards[victory_point.name] = victory_point
      local dupe_count = SGH_SETTINGS.card_defaults.victory_point.dupe_count
      if(victory_point.count ~= nil) then
        dupe_count = victory_point.count
      end
      local card = victory_point_cards.takeObject({dupe_position})
      for jj = 1, dupe_count do
        local victory_point_position = {-40, 2, 16 - indexHeight}
        local clone = card.clone({position = victory_point_position})
        clone.setName(victory_point.name)
        clone.addTag(kind)
        if(last_card ~= nil) then
          if(deck ~= nil) then
            deck = deck.putObject(clone)
          else
            deck = last_card.putObject(clone)
            SGH_LOOKUP[kind].victory_point_deck = deck
          end
        end
        last_card = clone
        table.insert(SGH_LOOKUP.victory_point_card_objects[kind], clone.guid)
      end
      destroyObject(card)
    end

    if (kind == "gathering") then
      local divider_position = {-50 + (10*8), 1, 20}
      local chapter_master_divider = divider_cards.takeObject({position=divider_position,rotation={0,180,0}})
      chapter_master_divider.addTag("expansion")
      local chapter_master_cards = spawnObject({
        type="DeckCustom",
        position = original_position,
        rotation = {0,180,0},
        scale = {1.5,1.5,1.5}
      })

      chapter_master_cards.setCustomObject({
        face = SGH_PATHS[kind].chapter_masters,
        back = SGH_PATHS.cardback.profession,
        unique_back = false,
        width = 3,
        height = 2,
        number = 6,
        sideways = false,
        back_is_hidden = true
      })

      for ii, chapter_master in ipairs(SGH_SETTINGS[kind].chapter_masters) do
        local lastCard = nil
        local card = chapter_master_cards.takeObject({position=dupe_position})
        local deck = nil
        for kk = 1, SGH_SETTINGS.card_defaults.chapter_master.dupe_count do
          local deck_position = {-8.5 - (ii * 5) + (7*8), 2, 15}
          local clone = card.clone({position=deck_position})
          clone.addTag("expansion")
          if(lastCard ~= nil) then
            if(deck ~= nil) then
              deck.putObject(clone)
            else
              deck = lastCard.putObject(clone)
            end
          end
          lastCard = clone
        end
        destroyObject(card)
      end

      local divider_position = {-50 + (10*8), 1, 0}
      local master_house_divider = divider_cards.takeObject({position=divider_position,rotation={0,180,0}})
      master_house_divider.addTag("expansion")
      local master_house_cards = spawnObject({
        type="DeckCustom",
        position = original_position,
        rotation = {0,180,0},
        scale = {1.5,1.5,1.5}
      })

      master_house_cards.setCustomObject({
        face = SGH_PATHS[kind].master_houses,
        back = SGH_PATHS.cardback.divider,
        unique_back = false,
        width = 2,
        height = 2,
        number = 3,
        sideways = false,
        back_is_hidden = true
      })

      for ii, master_house in ipairs(SGH_SETTINGS[kind].master_houses) do
        local card = master_house_cards.takeObject({position=dupe_position})
        local deck_position = {-34 - (ii*8) + (10*8), 2, -5}
        local clone = card.clone({position=deck_position})
        clone.addTag("expansion")
        destroyObject(card)
      end
    end
  end
end

function click_setup_alliance(obj, player, alt)
  playSet("alliance")
end

function click_setup_coalition(obj, player, alt)
  playSet("coalition")
end

function click_setup_fellowship(obj, player, alt)
  playSet("fellowship")
end

function click_setup_gathering(obj, player, alt)
  playSet("gathering")
end

function generateSets()
  for ii, kind in ipairs(SGH_SETTINGS.kinds) do
    local indexHeight = (ii - 1) * 10
    generateDecks(ii, kind)
  end
end

function populateNotebook()
  local notes = [[
    These are the instructions for the mod.
  ]]
  Notes.setNotes(notes)
end

function generateButton(text, position, on_click)
  local button_base = spawnObject({
      type = "BlockRectangle",
      position = position,
  })
  button_base.setColorTint({1,1,1,1})
  button_base.setScale({.1,.1,.05})
  button = button_base.createButton({
    click_function = on_click,
    label = text,
    position = {0,.5,0},
    rotation = {0,180,0},
    width = 600,
    height = 500,
    scale = {50,10,40}
  })
  return button_base
end

function click_2_player()
  log("clicked")
end

function click_3_player()
  log("clicked")
end

function click_4_player()
  log("clicked")
end

function click_play_old_worlde()
  -- Coalition - Cleric
  -- Fellowship - Fighter
  -- Alliance - Marshal
  -- Fellowship - Monk
  -- Coalition - Rogue
  -- Alliance - Wizard
  log("clicked")
end

function click_play_job_faire()
  -- Coalition - Artificer
  -- Fellowship - Bard
  -- Alliance - Spellblade
  -- Fellowship - Ranger
  -- Alliance - Shaman
  -- Coalition - Warlock
  log("clicked")
end

function generateButtons()
  SGH_LOOKUP.buttons = {
    setup = {}
  }
  SGH_LOOKUP.buttons.setup.player_count_3 = generateButton("3 Player", {-15, 5, -22}, "click_3_player")
  SGH_LOOKUP.buttons.setup.player_count_4 = generateButton("4 Player", {-5, 5, -22}, "click_4_player")
  SGH_LOOKUP.buttons.setup.player_count_2 = generateButton("2 Player", {-25, 5, -22}, "click_2_player")

  SGH_LOOKUP.buttons.setup.play_alliance = generateButton("Play\nAlliance", {-33, 5, -28}, "click_setup_alliance")
  SGH_LOOKUP.buttons.setup.play_coalition = generateButton("Play\nCoalition", {-26, 5, -28}, "click_setup_coalition")
  SGH_LOOKUP.buttons.setup.play_fellowship = generateButton("Play\nFellowship", {-19, 5, -28}, "click_setup_fellowship")
  SGH_LOOKUP.buttons.setup.play_gathering = generateButton("Play\nGathering", {-12, 5, -28}, "click_setup_gathering")
  SGH_LOOKUP.buttons.setup.play_old_world = generateButton("Play\nOld Worlde", {-5, 5, -28}, "click_play_old_worlde")
  SGH_LOOKUP.buttons.setup.play_job_faire = generateButton("Play\nJob Faire", {2, 5, -28}, "click_play_job_faire")
end

function generateRulebook(kind)
  local rulebook = spawnPDF(
    'SGH_rulebook',
    SGH_PATHS.asset.rulebook,
    {-40, 1, -40}
  )
  rulebook.setRotation({180,0,0})
  rulebook.setScale({3,1,3})
end

function buildGame()
  generateButtons()
  generateSets()
  populateNotebook()
  generateRulebook(kind)
end
