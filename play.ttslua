function generateTokens(kind)
  if(SGH_LOOKUP.vp1_bag == nil) then
    SGH_LOOKUP.vp1_bag = spawnObject({
      type = "Infinite_Bag",
      position = {-10,2,-15},
      scale = {2,2,2}
    })
    SGH_LOOKUP.vp1_bag.setName("1 VP Tokens")
    local victory_point_1_token = spawnObject({
      type = "Custom_Tile",
      position = {-10,5,-15},
      rotation = {0,180,0},
      scale = {1,1,1},
    })
    victory_point_1_token.setCustomObject({
      image = SGH_PATHS.piece.victory_point_1.front,
      image_bottom = SGH_PATHS.piece.victory_point_1.back,
      type = 2,
      stackable = true
    })
    victory_point_1_token.setName("VP Token - 1")

    SGH_LOOKUP.vp5_bag = spawnObject({
      type = "Infinite_Bag",
      name = "5 VP Tokens",
      position = {10,2,-15},
      scale = {2,2,2}
    })
    SGH_LOOKUP.vp5_bag.setName("5 VP Tokens")
    local victory_point_2_token = spawnObject({
      type = "Custom_Tile",
      position = {10,5,-15},
      rotation = {0,180,0},
      scale = {1,1,1}
    })
    victory_point_2_token.setName("VP Token - 5")
    victory_point_2_token.setCustomObject({
      image = SGH_PATHS.piece.victory_point_5.front,
      image_bottom = SGH_PATHS.piece.victory_point_5.back,
      type = 2,
      stackable = true
    })
  end
end

function generateGameMat(kind)
  if(SGH_LOOKUP.game_mat == nil) then
    local game_mat = spawnObject({
      type = "Custom_Board",
      rotation = {0, 180, 0},
      position = {0, 1, 0}

    })
    game_mat.setCustomObject({
      image = SGH_PATHS.asset.game_mat,
    })

    game_mat.setSnapPoints({
      { position = {-5.5, 1, -5.00}, rotation = {0,0,0}, rotation_snap = true},
      { position = {0, 1, -5.00}, rotation = {0,0,0}, rotation_snap = true},
      { position = {5.5,1, -5.00}, rotation = {0,0,0}, rotation_snap = true},
      { position = {0, 1, 5}, rotation = {0,0,0}, rotation_snap = true},
    })
    SGH_LOOKUP.game_mat = game_mat
  end
end

function generateProfessionDeck(kind)
  local profession_deck = nil
  local profession_deck_position = {-7.5, 3, 5.00}
  for ii, profession in ipairs(SGH_SETTINGS[kind].professions) do
    if(profession_deck == nil) then
      profession_deck = SGH_LOOKUP[kind].profession_decks[SGH_SETTINGS[kind].professions[1]]
    else
      profession_deck = profession_deck.putObject(SGH_LOOKUP[kind].profession_decks[profession])
    end
  end
  profession_deck.setPosition(profession_deck_position)
  profession_deck.shuffle()
  SGH_LOOKUP.profession_deck = profession_deck
end

function generateVictoryPointMarket(kind)
  SGH_LOOKUP[kind].victory_point_deck.setPosition({0, 3, 5.00})
  SGH_LOOKUP[kind].victory_point_deck.shuffle()

  local vp_targets = {
    -8,-4,0,4,8
  }
  for ii = 1,5 do
    local card = SGH_LOOKUP[kind].victory_point_deck.takeObject({
      position = {vp_targets[ii],3,-3},
      rotation = {0,180,0}
    })
  end
end

function generateDividers(kind)
  for ii = 1,6 do
    local divider = SGH_LOOKUP[kind].profession_dividers[SGH_SETTINGS[kind].professions[ii]]
    if (ii < 4) then
      divider.setPosition({-15, 2, 10 - (ii * 5)})
    else
      divider.setPosition({15, 2, 10 - ((ii - 3) * 5)})
    end
  end

  SGH_LOOKUP[kind].victory_point_divider.setPosition({0,2,-15})
end

function generatePlayerMats()
  if(SGH_LOOKUP.player_mat == nil) then
    SGH_LOOKUP.player = {}
    SGH_LOOKUP.player_color_to_index = {}
    SGH_LOOKUP.player_index_to_color = {}
    for ii,player in pairs(Player.getPlayers()) do
      local player_color = SGH_SETTINGS.table_colors[ii]
      player.changeColor(player_color)
      player.promote()
      SGH_LOOKUP.player_color_to_index[player_color] = ii
      SGH_LOOKUP.player_index_to_color[ii] = player_color
      local mat_config = SGH_SETTINGS.player_mats[ii]
      local player_mat = spawnObject({
        type = "Custom_Board",
        position = mat_config.position,
        rotation = mat_config.rotation,
        scale = {1.25,1.25,1.25}
      })

      player_mat.setCustomObject({
        image = SGH_PATHS.asset.player_mat
      })
      local guildhall_zone = spawnObject({
         type = "ScriptingTrigger",
         position = mat_config.guildhall_zone.position,
         scale = mat_config.guildhall_zone.scale
       })
      SGH_LOOKUP.player[ii] = {
          zone = {
            guildhall = {
              sort_debounce = nil,
              zone = guildhall_zone,
              objects = {}
            }
          },
          mat = player_mat
        }
    end
  end
end

function generateRulebook(kind)
  local rulebook = spawnPDF(
    'SGH_rulebook',
    SGH_PATHS.asset.rulebook,
    {-40, 1, -40}
  )
  rulebook.setRotation({180,0,0})
  rulebook.setScale({3,1,3})
end

function onObjectEnterScriptingZone(zone, object)
  for ii,player in pairs(Player.getPlayers()) do
    if(zone.getGUID() == SGH_LOOKUP.player[ii].zone.guildhall.zone.getGUID()) then
      if(string.find(object.getName(), "Profession")) then
        SGH_LOOKUP.player[ii].zone.guildhall.objects[object.getGUID()] = object
      end
    end
  end
end

function onObjectDrop(player_color, object)
  local player_index = SGH_LOOKUP.player_color_to_index[player_color]
  if(SGH_LOOKUP.player[player_index].zone.guildhall.objects[object.getGUID()] ~= nil) then
    SGH_LOOKUP.player[player_index].zone.guildhall.objects[object.getGUID()] = nil
    object.setVelocity({0,0,0})
    if(SGH_LOOKUP.player[player_index].zone.guildhall.sort_debounce ~= nil) then
      Wait.stop(SGH_LOOKUP.player[player_index].zone.guildhall.sort_debounce)
    end
    SGH_LOOKUP.player[player_index].zone.guildhall.sort_debounce = Wait.time(function()
      sortGuildhall(player_index)
      SGH_LOOKUP.player[player_index].zone.guildhall.sort_debounce = nil
    end,
    SGH_SETTINGS.debounce_seconds)
  end
end

function sortGuildhall(player_index)
  log("Sorting guildhall "..player_index)
  local zone_config = SGH_SETTINGS.player_mats[player_index].guildhall_zone
  log(SGH_SETTINGS.player_mats[player_index].name)
  log(zone_config)
  local guildhall_objects = SGH_LOOKUP.player[player_index].zone.guildhall.zone.getObjects()
  local profession_cards = {}
  local profession_keys = {}
  local profession_dupes = {}
  for _,object in pairs(guildhall_objects) do
    if(string.match(object.getName(), "Profession")) then
      local card_info = {
        guid = object.getGUID(),
        object = object,
        name = object.getName()
      }
      if(profession_dupes[card_info.name] ~= nil) then
        object.setPosition({7.5,4,5})
        object.setRotation({180,0,180})
      else
        local match = 1
        for part in string.gmatch(object.getName(),"%w+") do
          if(match == 2) then
            card_info.profession = part
          end
          if(match == 3) then
            card_info.color = part
          end
          match = match + 1
        end
        profession_cards[card_info.name] = card_info
        profession_keys[card_info.name] = card_info.name
        profession_dupes[card_info.name] = card_info
      end
    end
  end
  local card_keys = {}
  for k,v in pairs(profession_cards) do
    table.insert(card_keys, v.name)
  end
  table.sort(card_keys)
  local profession_column = 0
  local profession_row = 0
  local last_card = nill
  for _, card_name in ipairs(card_keys) do
    local card_info = profession_cards[card_name]
    if(last_card ~= nil) then
      if(last_card.profession != card_info.profession) then
        profession_column = profession_column + 1
        profession_row = 0
      else
        profession_row = profession_row + 1
      end
    end
    last_card = card_info
    card_info.object.setPosition(zone_config.place_card(profession_column, profession_row))
    card_info.object.setRotation(zone_config.rotation)
  end
end

function playSet(kind)
  log("Playing "..kind)
  generateGameMat(kind)
  generatePlayerMats(kind)
  generateTokens(kind)
  generateDividers(kind)
  generateVictoryPointMarket(kind)
  generateProfessionDeck(kind)
  generateRulebook(kind)

  if(SGH_LOOKUP.profession_deck ~= nil) then
    SGH_LOOKUP.profession_deck.deal(10, "White")
    SGH_LOOKUP.profession_deck.deal(10, "Red")
    SGH_LOOKUP.profession_deck.deal(10, "Green")
    SGH_LOOKUP.profession_deck.deal(10, "Blue")
  end

  destroyObject(SGH_LOOKUP[kind].play_button)
end
